Project Task: A Simple Library Management System
Task: Create a basic library management system using Dart OOP concepts.

The system should allow users to:
Add books: Users should be able to enter the book's title, author, and ISBN.
Search for books: Users can search for books by title, author, or ISBN.
Borrow books: Users can borrow available books.
Return books: Users can return borrowed books.
Requirements:

Use classes to represent books and users.
Implement methods for adding, searching, borrowing, and returning books.
Maintain a list of available and borrowed books.
Handle error cases (e.g., when a book is not found or already borrowed).

Additional Considerations:

Data persistence: Consider using a database or file to store book and user information
for long-term persistence.

User interface: Implement a simple user interface (e.g., command-line or a GUI)
to interact with the system.

Error handling: Implement robust error handling to prevent unexpected behavior.

Book categories: Extend the system to include book categories and allow users
to search by category.

This project provides a solid foundation for understanding OOP concepts
in Dart and can be expanded upon to create a more comprehensive
library management system.









Solution:
1. Define the classes:
class Book {
  String title;
  String author;
  String isbn;
  bool isAvailable;

  Book(this.title, this.author, this.isbn) {
    isAvailable = true;
  }
}

class User {
  String name;
  List<Book> borrowedBooks;

  User(this.name) {
    borrowedBooks = [];
  }
}
2. Create a library class to manage books and users:

class Library {
  List<Book> books;
  List<User> users;

  Library() {
    books = [];
    users = [];
  }

  void addBook(Book book) {
    books.add(book);
  }

  void addUser(User user) {
    users.add(user);
  }

  Book? searchBook(String query) {
    return books.firstWhere((book) => book.title.contains(query) || book.author.contains(query) || book.isbn.contains(query), orElse: () => null);
  }

  bool borrowBook(User user, Book book) {
    if (book.isAvailable) {
      user.borrowedBooks.add(book);
      book.isAvailable = false;
      return true;
    }
    return false;
  }

  bool returnBook(User user, Book book) {
    if (user.borrowedBooks.contains(book)) {
      user.borrowedBooks.remove(book);
      book.isAvailable = true;
      return true;
    }
    return false;
  }
}

3. The main function to demonstrate usage:

void main() {
  Library library = Library();

  // Add some books
  library.addBook(Book("The Great Gatsby", "F. Scott Fitzgerald", "9780743273565"));
  library.addBook(Book("1984", "George Orwell", "9780451534852"));

  // Add a user
  library.addUser(User("John Doe"));

  // Borrow a book
  Book? borrowedBook = library.searchBook("The Great Gatsby");
  if (borrowedBook != null) {
    library.borrowBook(library.users[0], borrowedBook);
    print("${library.users[0].name} borrowed ${borrowedBook.title}.");
  }

  // Return the book
  library.returnBook(library.users[0], borrowedBook!);
  print("${library.users[0].name} returned ${borrowedBook.title}.");
}

Class Diagram:

classDiagram
    class Library {
        + books : List<Book>
        + users : List<User>
        + addBook(book : Book)
        + addUser(user : User)
        + searchBook(query : String) : Book?
        + borrowBook(user : User, book : Book) : bool
        + returnBook(user : User, book : Book) : bool
    }

    class Book {
        + title : String
        + author : String
        + isbn : String
        + isAvailable : bool
        + Book(title : String, author : String, isbn : String)
    }

    class User {
        + name : String
        + borrowedBooks : List<Book>
        + User(name : String)
    }

    Library "1" -- "*" Book
    Library "1" -- "*" User
    User "1" -- "*" Book

